#!/usr/bin/env bash

__bash_logger_max_level="${1:?"A max level is required"}"
__bash_logger_channel="${2:?"A channel is required"}"

__bash_logger_prefix=$([[ -n $3 ]] && echo " $3 ")

##
# Gets the numerical value for a log level
##
__bash_logger::get_level_value() {
    local level="${1:?"A log level value is required"}"
    local levels=(
        "EMERGENCY" "ALERT" "CRITICAL" "ERROR" "WARNING" "NOTICE" "INFO" "DEBUG"
    )

    for i in ${!levels[@]}; do
        if [[ "$level" == "${levels[$i]}" ]]; then
            echo "$i" && break
        fi
    done
}

##
# Determines if, given a set maximum allowable level, the given level has been
# reached.
##
__bash_logger::level_reached() {
    local level="${1:?"A log level value is required"}"

    local required="$(__bash_logger::get_level_value $level)"
    local max="$(__bash_logger::get_level_value $__bash_logger_max_level)"

    [[ $required -le $max ]] && echo true || echo false
}

##
# Attempt to log a message.
#
log::log() {
    local level="${1:?"A log level value is required"}"
    local message="$2"
    local context=${@:3}

    if [[ -n "$context" ]]; then
        context="{ $(echo $context | sed 's/;*$//g') }"
    fi

    local timestamp="[$(date +"%Y-%m-%d %H:%M:%S")]"
    local separator="-"

    if [[ ! -f "$__bash_logger_channel" ]]; then
        touch "$__bash_logger_channel"
    fi

    if $(__bash_logger::level_reached $level) && [[ -w "$__bash_logger_channel" ]]; then
        echo "$__bash_logger_prefix$timestamp $level $separator $message $context" >> "$__bash_logger_channel"
    fi
}

##
# Proxy methods for the main log::log method
##

log::emergency() {
    log::log "EMERGENCY" "$1" ${@:2}
}
log::alert() {
    log::log "ALERT" "$1" ${@:2}
}
log::critical() {
    log::log "CRITICAL" "$1" ${@:2}
}
log::error() {
    log::log "ERROR" "$1" ${@:2}
}
log::warning() {
    log::log "WARNING" "$1" ${@:2}
}
log::notice() {
    log::log "NOTICE" "$1" ${@:2}
}
log::info() {
    log::log "INFO" "$1" ${@:2}
}
log::debug() {
    log::log "DEBUG" "$1" ${@:2}
}
